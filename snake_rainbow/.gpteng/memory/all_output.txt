To implement the Snake game in Python following the MVC (Model-View-Controller) pattern, we will need several core classes and functions. Here's a list of the core components and a brief comment on their purpose:

- `game_model.py`: Contains the `GameModel` class, which holds the game state, such as the snake's position, direction, and the location of the food.
- `game_view.py`: Contains the `GameView` class, which handles the rendering of the game state to the screen.
- `game_controller.py`: Contains the `GameController` class, which handles user input and updates the `GameModel`.
- `snake.py`: Contains the `Snake` class, which represents the snake and its behavior.
- `food.py`: Contains the `Food` class, which represents the food and its behavior.
- `constants.py`: Contains constants used throughout the game, such as screen size, colors, and directions.
- `main.py`: The entry point of the application, which sets up the MVC components and starts the game loop.
- `requirements.txt`: Lists the Python package dependencies for the project.

Let's start by creating the entry point file and then proceed to the files that are imported by that file.

main.py
```python
from game_controller import GameController

def main():
    game_controller = GameController()
    game_controller.run_game()

if __name__ == "__main__":
    main()
```

game_controller.py
```python
import pygame
from game_model import GameModel
from game_view import GameView
from constants import SCREEN_SIZE

class GameController:
    def __init__(self):
        pygame.init()
        self.model = GameModel()
        self.view = GameView(self.model, SCREEN_SIZE)
        self.clock = pygame.time.Clock()

    def run_game(self):
        running = True
        while running:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    running = False
                elif event.type == pygame.KEYDOWN:
                    self.model.update_direction(event.key)
            self.model.update_game_state()
            self.view.render()
            self.clock.tick(10)
        pygame.quit()

```

game_model.py
```python
import pygame
from snake import Snake
from food import Food
from constants import DIRECTIONS, SCREEN_SIZE

class GameModel:
    def __init__(self):
        self.snake = Snake()
        self.food = Food()
        self.direction = pygame.K_RIGHT

    def update_direction(self, key):
        if key in DIRECTIONS and DIRECTIONS[key] != self.snake.get_opposite_direction():
            self.direction = key

    def update_game_state(self):
        self.snake.move(self.direction)
        if self.snake.head_position() == self.food.position:
            self.snake.grow()
            self.food.respawn(self.snake)

        if self.snake.has_collided() or not self.snake.is_in_bounds(SCREEN_SIZE):
            self.reset()

    def reset(self):
        self.snake = Snake()
        self.food = Food()
        self.direction = pygame.K_RIGHT

```

game_view.py
```python
import pygame
from constants import BACKGROUND_COLOR

class GameView:
    def __init__(self, model, screen_size):
        self.model = model
        self.screen = pygame.display.set_mode(screen_size)
        pygame.display.set_caption('Snake Game')

    def render(self):
        self.screen.fill(BACKGROUND_COLOR)
        self.model.snake.draw(self.screen)
        self.model.food.draw(self.screen)
        pygame.display.flip()

```

snake.py
```python
import pygame
from constants import SNAKE_COLOR, SNAKE_SIZE, DIRECTIONS

class Snake:
    def __init__(self):
        self.positions = [(100, 100), (90, 100), (80, 100)]
        self.direction = pygame.K_RIGHT

    def move(self, direction):
        current = self.positions[0]
        x, y = current
        dx, dy = DIRECTIONS[direction]
        new_head = (x + dx, y + dy)
        self.positions = [new_head] + self.positions[:-1]

    def draw(self, screen):
        for position in self.positions:
            pygame.draw.rect(screen, SNAKE_COLOR, (*position, SNAKE_SIZE, SNAKE_SIZE))

    def head_position(self):
        return self.positions[0]

    def grow(self):
        self.positions.append(self.positions[-1])

    def get_opposite_direction(self):
        if self.direction == pygame.K_UP:
            return pygame.K_DOWN
        elif self.direction == pygame.K_DOWN:
            return pygame.K_UP
        elif self.direction == pygame.K_LEFT:
            return pygame.K_RIGHT
        elif self.direction == pygame.K_RIGHT:
            return pygame.K_LEFT

    def has_collided(self):
        head = self.head_position()
        return head in self.positions[1:]

    def is_in_bounds(self, screen_size):
        x, y = self.head_position()
        return 0 <= x < screen_size[0] and 0 <= y < screen_size[1]

```

food.py
```python
import pygame
import random
from constants import FOOD_COLOR, FOOD_SIZE, SCREEN_SIZE

class Food:
    def __init__(self):
        self.position = self.random_position()

    def draw(self, screen):
        pygame.draw.rect(screen, FOOD_COLOR, (*self.position, FOOD_SIZE, FOOD_SIZE))

    def random_position(self):
        return (random.randint(0, SCREEN_SIZE[0] // FOOD_SIZE - 1) * FOOD_SIZE,
                random.randint(0, SCREEN_SIZE[1] // FOOD_SIZE - 1) * FOOD_SIZE)

    def respawn(self, snake):
        self.position = self.random_position()
        while self.position in snake.positions:
            self.position = self.random_position()

```

constants.py
```python
# Screen dimensions
SCREEN_SIZE = (600, 400)

# Colors
BACKGROUND_COLOR = (0, 0, 0)
SNAKE_COLOR = (0, 255, 0)
FOOD_COLOR = (255, 0, 0)

# Sizes
SNAKE_SIZE = 10
FOOD_SIZE = 10

# Directions
DIRECTIONS = {
    pygame.K_UP: (0, -SNAKE_SIZE),
    pygame.K_DOWN: (0, SNAKE_SIZE),
    pygame.K_LEFT: (-SNAKE_SIZE, 0),
    pygame.K_RIGHT: (SNAKE_SIZE, 0),
}
```

requirements.txt
```
pygame==2.0.1
```

This concludes a fully working implementation.